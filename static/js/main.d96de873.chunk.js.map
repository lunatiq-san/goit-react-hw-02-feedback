{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.jsx","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","styles","text","FeedbackOptions","options","onLeaveFeedback","container","map","option","type","onClick","button","Section","title","children","Notification","message","App","state","incrementFeedback","stateName","setState","prevState","countTotalFeedback","Object","values","reduce","stateQuantity","countPositiveFeedbackPercentage","Math","round","this","keys","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAuBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,oBAAGC,UAAWC,IAAOC,KAArB,mBAAkCP,KAClC,oBAAGK,UAAWC,IAAOC,KAArB,sBAAqCN,KACrC,oBAAGI,UAAWC,IAAOC,KAArB,kBAAiCL,KACjC,oBAAGG,UAAWC,IAAOC,KAArB,oBAAmCJ,KACnC,oBAAGE,UAAWC,IAAOC,KAArB,gCAA+CH,EAA/C,W,gBCoBSI,EA3BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACE,qBAAKL,UAAWC,IAAOK,UAAvB,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,QAAS,WACPL,EAAgBG,IAElBR,UAAWC,IAAOU,OANpB,SAQGH,GANIA,W,gBCKFI,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASd,UAAWC,IAAOK,UAA3B,UACE,oBAAIN,UAAWC,IAAOY,MAAtB,SAA8BA,IAC7BC,MCEUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCIpCC,E,4MAKJC,MAAQ,CACNvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPsB,kBAAoB,SAAAC,GAClB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAYE,EAAUF,GAAa,O,EAIxCG,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKP,OAAOQ,QACxB,SAAC5B,EAAO6B,GAAR,OAA0B7B,EAAQ6B,IAClC,I,EAGJC,gCAAkC,kBAChC,EAAKL,qBACDM,KAAKC,MAAyB,IAAlB,EAAKZ,MAAMvB,KAAc,EAAK4B,sBAC1C,G,4CAEN,WACE,IACEL,EAIEa,KAJFb,MACAK,EAGEQ,KAHFR,mBACAK,EAEEG,KAFFH,gCACAT,EACEY,KADFZ,kBAGF,OACE,qCACE,cAAC,EAAD,CAASN,MAAM,wBAAf,SACE,cAAC,EAAD,CACET,QAASoB,OAAOQ,KAAKd,GACrBb,gBAAiBc,MAGrB,cAAC,EAAD,CAASN,MAAM,aAAf,SACGU,IAAuB,EACtB,cAAC,EAAD,CACE5B,KAAMuB,EAAMvB,KACZC,QAASsB,EAAMtB,QACfC,IAAKqB,EAAMrB,IACXC,MAAOyB,IACPxB,mBAAoB6B,MAGtB,cAAC,EAAD,CAAcZ,QAAQ,+B,GAtDhBiB,aAAZhB,EACGiB,aAAe,GA6DTjB,QC/DfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,OAAS,kC,kBCA1ED,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,0B","file":"static/js/main.d96de873.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.text}>Good: {good}</p>\r\n      <p className={styles.text}>Neutral: {neutral}</p>\r\n      <p className={styles.text}>Bad: {bad}</p>\r\n      <p className={styles.text}>Total: {total}</p>\r\n      <p className={styles.text}>Positive feedback: {positivePercentage}%</p>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.string.isRequired,\r\n  neutral: PropTypes.string.isRequired,\r\n  bad: PropTypes.string.isRequired,\r\n  total: PropTypes.func.isRequired,\r\n  positivePercentage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        {options.map(option => (\r\n          <button\r\n            type=\"button\"\r\n            key={option}\r\n            onClick={() => {\r\n              onLeaveFeedback(option);\r\n            }}\r\n            className={styles.button}\r\n          >\r\n            {option}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.oneOf(['good', 'neutral', 'bad']))\r\n    .isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className={styles.container}>\r\n    <h2 className={styles.title}>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  static defaultProps = {};\n\n  static propTypes = {};\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  incrementFeedback = stateName => {\n    this.setState(prevState => ({\n      [stateName]: prevState[stateName] + 1,\n    }));\n  };\n\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce(\n      (total, stateQuantity) => total + stateQuantity,\n      0,\n    );\n\n  countPositiveFeedbackPercentage = () =>\n    this.countTotalFeedback()\n      ? Math.round((this.state.good * 100) / this.countTotalFeedback())\n      : 0;\n\n  render() {\n    const {\n      state,\n      countTotalFeedback,\n      countPositiveFeedbackPercentage,\n      incrementFeedback,\n    } = this;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(state)}\n            onLeaveFeedback={incrementFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {countTotalFeedback() > 0 ? (\n            <Statistics\n              good={state.good}\n              neutral={state.neutral}\n              bad={state.bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__1i4SE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FeedbackOptions_container__1tP_M\",\"button\":\"FeedbackOptions_button__2CmHx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1eEO7\",\"title\":\"Section_title__1fcek\"};"],"sourceRoot":""}